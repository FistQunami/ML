#include <iostream>
#include <vector>

#include <algorithm>

using namespace std;

bool dfs(int node, vector<vector<int>>& graph, vector<int>& visited, vector<int>& result) {
    visited[node] = 1; 
    for (int neighbor : graph[node]) {
        if (visited[neighbor] == 0) {
            if (!dfs(neighbor, graph, visited, result)) {
                return false; 
            }
        } else if (visited[neighbor] == 1) {
            return false; 
        }
    }
    visited[node] = 2; 
    result.push_back(node); 
    return true;
}

vector<int> topologicalSort(vector<vector<int>>& graph) {
    int n = graph.size();
    vector<int> visited(n, 0); 
    vector<int> result;

    for (int i = 0; i < n; ++i) {
        if (visited[i] == 0) {
            if (!dfs(i, graph, visited, result)) {
                cout << "Граф содержит цикл!" << endl;
                return {};
            }
        }
    }

    reverse(result.begin(), result.end()); 
    return result;
}

int main() {
    int n, m;
    cout << "Введите количество вершин и ребер: ";
    cin >> n >> m;

    vector<vector<int>> graph(n);
    cout << "Введите ребра (вершина1 вершина2):" << endl;
    for (int i = 0; i < m; ++i) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
    }

    vector<int> result = topologicalSort(graph);

    if (!result.empty()) {
        cout << "Топологическая сортировка вершин:" << endl;
        for (int node : result) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}